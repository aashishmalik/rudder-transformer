bindings:
  - name: EventType
    path: ../../../../constants
  - path: ../../bindings/jsontemplate
    exportAll: true
  - path: ./config
  - name: removeUndefinedAndNullValues
    path: ../../../../v0/util
  - name: defaultRequestConfig
    path: ../../../../v0/util

steps:
  - name: validateInput
    template: |
      let messageType = .message.type;
      $.assert(.message.type, "message Type is not present. Aborting message.");
      $.assert(.message.type.toLowerCase() ==='audiencelist', "Event type " + .message.type.toLowerCase() + " is not supported. Aborting message.");
      $.assert(.message.properties, "Message properties is not present. Aborting message.");
      $.assert(.message.properties.listData, "listData is not present inside properties. Aborting message.");
      $.assert($.containsAll(Object.keys(.message.properties.listData), ["add", "remove"]), "unsupported action type. Aborting message.")

  - name: prepareIdentifiersList
    description: |
      Populate list of identifiers to be updated
    template: |
      const destinationFields = .message.context.destinationFields.split(", ")
      const audienceId = .message.context.externalId[0].type.split("-")[1];
      const isHashRequired = .destination.Config.isHashRequired;
      const advertiserIds = .metadata.secret.advertiserIds;
      const hashTraits = function(traits) {
        const batch_data = [];
        traits.forEach(function(trait){
          const arr = [];
          destinationFields.forEach(function(destinationField){
            let hashedData = trait[destinationField] ? {
              "id": isHashRequired ? $.SHA256(trait) : trait,
              "audience_ids":[audienceId]
            } :{};
            arr.push(hashedData); 
          })
          batch_data.push(arr);
        })
        batch_data
      };
      const actionMap = {
          add: "add",
          remove: "delete"
      };
      const listData = .message.properties.listData
      Object.keys(listData).map(function(action){
        {
          "batch_data": hashTraits(listData[action]),
          "id_schema": destinationFields,
          "advertiser_ids": advertiserIds,
          "action": actionMap[action],
        }
      })[]

  - name: buildResponseForProcessTransformation
    description: build response
    template: |
      const response = []
      const accessToken = .metadata.secret.accessToken
      $.outputs.prepareIdentifiersList.forEach(function(prepareIdentifiersList){
        const temp = $.defaultRequestConfig();
        temp.body.JSON = prepareIdentifiersList;
        temp.userId = .message.anonymousId;
        temp.endpoint = "https://business-api.tiktok.com/open_api/v1.3/segment/mapping/";
        temp.headers = {
          "Access-Token": accessToken,
          "Content-Type": "application/json"
        }
        response.push(temp);
      })
      response
